/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package messenger;

import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author Mathew
 */
public class UIClient extends javax.swing.JFrame {

    SimpleDateFormat dateFormat = new SimpleDateFormat("H:mm");
    StringBuffer content = new StringBuffer();
    Client client = new Client() {
        public void connected() {
            super.connected();
            UIClient.this.connected();
        }
        
        public void authorized() {
            super.authorized();
            UIClient.this.authorized();
        }
        
        public void disconnected(Exception e) {
            super.disconnected(e);
            UIClient.this.disconnected(e);
        }
        
        public void closedConnection(Exception e) {
            super.closedConnection(e);
            UIClient.this.closedConnection(e);
        }
        
        public void saidHello() {
            super.saidHello();
            UIClient.this.saidHello();
        }
        
        public void gotNewMessage(String nickname, String message) {
            super.gotNewMessage(nickname, message);
            UIClient.this.gotNewMessage(nickname, message);
        }
    };
    
    /**
     * Creates new form UIClient
     */
    public UIClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionButton = new javax.swing.JButton();
        textField = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Messenger");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        actionButton.setText("Подключиться");
        actionButton.setToolTipText("Кнопка действия");
        actionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionButtonActionPerformed(evt);
            }
        });

        textField.setToolTipText("Поле ввода");

        textPane.setContentType("text/html"); // NOI18N
        textPane.setToolTipText("Журнал сообщений");
        scrollPane.setViewportView(textPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textField, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(actionButton)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void actionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionButtonActionPerformed
        String text = textField.getText();
        if (client.user == null || client.user.uid < 0) {
            requestConnect();
        } else {
            if (text == null || text.trim().isEmpty()) {
                client.disconnect();
            } else {
                try {
                    client.sendMessage(text);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "Ошибка отправки сообщения:\n" + ex, "Ошибка", JOptionPane.ERROR_MESSAGE);
                }
            }
            textField.setText("");
        }
    }//GEN-LAST:event_actionButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        client.disconnect();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UIClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UIClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton actionButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextField textField;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables

    private void requestConnect() {
        String address = (String) JOptionPane.showInputDialog(this, "IP сервера: ", "Подключение", JOptionPane.PLAIN_MESSAGE, null, null, "127.0.0.1");
        if (address == null || address.trim().isEmpty()) JOptionPane.showMessageDialog(this, "Введите IP адрес сервера.", "Ошибка", JOptionPane.ERROR_MESSAGE);
        else {
            try {
                client.connect(address);
                String nickname = (String) JOptionPane.showInputDialog(this, "Желаемый никнейм: ", "Авторизация", JOptionPane.PLAIN_MESSAGE, null, null, "User");
                client.authorize(nickname);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Не удалось подключиться к серверу:\n" + ex, "Ошибка", JOptionPane.ERROR_MESSAGE);
                client.disconnect();
            }
        }
    }

    private void connected() {
        append("Подключен к " + client.user.socket.getInetAddress().getHostAddress() + ".");
    }

    private void disconnected(Exception e) {
        append("Отключен, причина: " + e);
        actionButton.setText("Подключиться");
    }

    private void authorized() {
        append("Авторизован, ID: " + client.user.uid + ", никнейм: " + client.user.nickname);
        actionButton.setText("Отправить");
    }

    private void closedConnection(Exception e) {
        append("Отключаюсь, причина: " + e);
    }

    private void saidHello() {
        append("Произвел рукопожатие.");
    }

    private void gotNewMessage(String nickname, String message) {
        append(nickname, message);
    }

    private void append(String string) {
        content.append("<font color=\"silver\">").append(string).append("</font><br>");
        update();
    }
    
    private void append(String nickname, String message) {
        content.append("<font color=\"blue\">").append("[").append(dateFormat.format(new Date())).append("] ").append(nickname).append(": ").append("</font>").append(message).append("<br>");
        update();
    }

    private void update() {
        textPane.setText("<html><body>" + content.toString() + "</body></html>");
    }
}
